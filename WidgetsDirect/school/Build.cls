Class school.Build
{

XData BuildManifest
{
<Manifest>
<!-- You have to specify JOBNAME with job name via parameter string -->
<If Condition="&quot;${JOBNAME}&quot;=&quot;&quot;"><Error /></If>
<!-- You have to specify SRCDIR with source code directory via parameter string -->
<If Condition="&quot;${SRCDIR}&quot;=&quot;&quot;"><Error /></If>

<!-- Namespace -->
<Var Name="NAMESPACE" Value="${JOBNAME}" />

<!-- Set process charset to UTF8 -->
<Namespace Name="USER">
<Invoke Class="school.Build" Method="SetDefaultCharsetUnicode" CheckStatus="true">
</Invoke>
</Namespace>

<!-- Delete old namespace and create new one -->
<Namespace Name="${NAMESPACE}" Create="overwrite" 
  Code="${NAMESPACE}" Data="${NAMESPACE}">
<Configuration>
<Database Name="${NAMESPACE}" Dir="${DBDIR}" Create="overwrite" InitialSize="1" ExpansionSize="1" />
 <CSPApplication name="${NAMESPACE}" Directory="${DBDIR}\csp" Url="/csp/${NAMESPACE}"
  Description="Build application" 
  Recurse="true" 
  ServeFiles="true"
   AuthenticationMethods="64" />
</Configuration>

<!-- Invoke compile method -->
<Invoke Class="%SYSTEM.OBJ" Method="Load" CheckStatus="true">
<Arg name="file" Value="${SRCDIR}/school/Build.cls" />
<Arg name="qspec" Value="cn" />
</Invoke>

<Invoke Class="school.Build" Method="SetDefaultCharsetUnicode" CheckStatus="true">
</Invoke>

<!-- Invoke compile method -->
<Invoke Class="%SYSTEM.OBJ" Method="ImportDir" CheckStatus="true">
<Arg name="dir" Value="${SRCDIR}" />
<Arg name="wildcards" Value="*.cls" />
<Arg name="qspec" Value="cn/multicompile=0" />
<Arg name="errorlog" Value="" />
<Arg name="recursive" Value="1" />
</Invoke>

</Namespace>

<!-- Now, dismount database so we can copy database file -->
<!-- This call is invoked in %SYS namespace -->
<If Condition="${DISMOUNT}">
<Namespace Name="%SYS">
<Invoke Class="SYS.Database" Method="DismountDatabase" CheckStatus="true">
<Arg name="DatabaseDir" Value="${DBDIR}" />
</Invoke>
</Namespace>
</If>

</Manifest>
}

/// This method is called to pass parameters into generated build method
ClassMethod Build(pJobName As %String = "BUILD", pSrcDir As %String = "C:\source\", pDismount As %Boolean = 0, pDbDir) As %Status
{
	set vars("JOBNAME")=$g(pJobName)
	set vars("SRCDIR")=##class(%File).NormalizeDirectory($g(pSrcDir))
	set vars("DISMOUNT")=$g(pDismount)
	set vars("DBDIR")=$g(pDbDir,vars("SRCDIR")_"db")

	Set pLogLevel=3
	Set sc=..RunBuildManifest(.vars, .pLogLevel)

	Quit sc
}

/// This is a standard %Installer method generator whose code is generated by XGL.
ClassMethod RunBuildManifest(ByRef pVars, pLogLevel As %Integer, pInstaller As %Installer.Installer) As %Status [ CodeMode = objectgenerator, Internal ]
{
	#; Let our XGL document generate code for this method.
	quit ##class(%Installer.Manifest).%Generate(%compiledclass, %code, "BuildManifest")
}

/// Set default IO chracter set for this process to UTF8
ClassMethod SetDefaultCharsetUnicode() As %Status
{
	do SetPDefIO^%SYS.NLS("UTF8",3) 
	quit $$$OK
}

}
